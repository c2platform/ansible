---
- name: Backup roles for node
  set_fact: backup_roles_node="{{ backup_roles_supported | intersect(ansible_role_names_cleaned) }}"

- name: Check backup installed
  stat: 
    path: "/opt/backup/bin"
  register: backup_bin

- include_tasks: "setup-{{ ansible_os_family }}.yml"

- name: Create backup dirs
  file:
    path: "{{ item }}"
    state: directory
    mode: 0700
  with_items: 
    - /etc/backup
    - /etc/backup/models
    - /etc/backup/scripts

- name: Generate example config file
  command: /opt/backup/bin/backup generate:config --config-file=/etc/backup/config-example.rb
  args:
    creates: /etc/backup/config-example.rb

- name: Config rb
  template:
    src: config.rb.j2
    dest: /etc/backup/config.rb

- include_tasks: "models.yml"

- include_tasks: "alias.yml"

- name: Cron
  template:
   dest: '/etc/cron.d/backup-{{ item }}'
   src: cron.j2
  when: backup['schedules'][item] is defined and backup_cron_jobs == True
  with_items: "{{ backup['schedules_default'] }}" 

- name: Disable cron jobs
  file:
   path: '/etc/cron.d/backup-{{ item }}'
   state: absent
  when: backup['schedules'][item] is not defined or backup_cron_jobs == False
  with_items: "{{ backup['schedules_default'] }}" 

- name: Daily, weekly etc scripts
  template:
   dest: '/etc/backup/scripts/backup_{{ item }}.sh'
   src: backup.sh.j2
   mode: 0755
  when: backup['schedules'][item] is defined
  with_items: "{{ backup['schedules_default'] }}" 

- name: Sql scripts
  template:
   dest: '/etc/backup/scripts/{{ item }}'
   src: "{{ item }}.j2"
  with_items: 
    - "db_snapshot.sql" 
    - "db_snapshot_drop.sql" 

- name: Rsync
  package:
    name: rsync
    state: present

- include_tasks: "restore.yml"
  when: backup_restore is defined

# TODO remove
- name: Remove obsolete hook file
  file:
    path: "{{ item }}"
    state: "absent"
  with_items: 
    - "/etc/backup/scripts/hooks.sh"
    - "/etc/backup/scripts/helpers.sh"
