
# -*- mode: ruby -*-
# vi: set ft=ruby :

vagrant_box = 'generic/centos7'
# vagrant_box = 'generic/ubuntu1804'

shell_provision = 'sudo apt-get update && sudo apt-get -y install python'
shell_provision = 'sudo yum update -y && sudo yum -y install python' if vagrant_box == 'generic/centos7'

# Ansible inventory
ansible_groups = {
  'postgresql' => ['postgresql'],
  'postgresql:vars' => { 'hostvar' => 'abc' },
  'all:vars' => {
    'sudo_include_sudoersd' => 'yes', # vagrant
    'gi' => false
  },
  'sonarqube' => ['sonarqube'],
  'sonarqube:vars' => {
    'sonar_database_host' => '1.1.1.2'
  },
  'nfs' => ['proxy'],
  'nfs:vars' => {
    'nfs_exports' => ["/nfs/backup *(rw,sync,no_root_squash)"]
  },
  'proxy' => ['proxy'],
  'backup' => ['sonarqube']
}
ansible_host_vars = {
  'postgresql' => { 'xyz' => 80 }
}

# Vagrant nodes
nodes = {}
nodes['sonarqube'] = {
  'ip' => '1.1.1.4',
  'plays' => %w(sonarqube backup)
}
nodes['postgresql'] = {
  'ip' => '1.1.1.2',
  'plays' => %w(postgresql)
}
nodes['proxy'] = {
  'ip' => '1.1.1.3',
  'plays' => %w(proxy)
}

Vagrant.configure(2) do |config|
  nodes.each do |n, a|
    config.vm.define n do |cfg|
      cfg.vm.hostname = n # .e.g. sonarqube
      cfg.vm.box = vagrant_box
      cfg.vm.network 'private_network', ip: a['ip']
      cfg.vm.provider 'virtualbox' do |vb|
        vb.gui = false
        vb.memory = 1024 * 2
        vb.cpus = 2
      end
      cfg.vm.provision 'shell', inline: shell_provision
      a['plays'].each do |p|
        cfg.vm.provision 'ansible' do |ansible|
          ansible.config_file = '../plays/ansible.cfg'
          ansible.playbook = "../plays/#{p}.yml"
          ansible.groups = ansible_groups
          ansible.host_vars = ansible_host_vars
          # ansible.inventory_path = '../development.ini' # NO!
          # ansible.galaxy_role_file = '../roles/requirements.yml'
          # ansible.galaxy_roles_path = '~/.ansible/roles'
          # ansible.verbose = 'vvv'
        end
      end
    end
  end
end
