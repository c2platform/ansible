
preconfigure 'GenericBackup' do

  split_into_chunks_of {{ backup_split_into_chunks_of }}
  compress_with Gzip

  FileUtils.mkdir_p('{{ backup_logs }}')
  FileUtils.mkdir_p('{{ backup_tmp }}')

  logfile = File.join('{{ backup_logs }}',"{{ inventory_hostname }}_#{self.trigger}.log")

  before do
    File.delete(logfile) if File.exists?(logfile)
    `/etc/backup/scripts/hooks.sh #{self.trigger} before`
    if $? != 0
      Logger.error File.read(logfile) if File.exists?(logfile)
      raise "Error in #{self.trigger}-before"
    end
  end

{% if backup_notify_mail['enabled'] == true %}
  notify_by Mail do |mail|
{% if backup_notify_mail['from'] is defined %}  
    mail.from    = '{{ backup_notify_mail['from'] }}'
{% else %}
    mail.from    = '{{ inventory_hostname }}@{{ backup_notify_mail['domain'] }}'
{% endif %}
    mail.to = '{{ backup_notify_mail['to'] }}'
    mail.address = '{{ backup_notify_mail['address'] }}'
    mail.port    = '{{ backup_notify_mail['port'] }}'
    mail.domain  = '{{ backup_notify_mail['domain'] }}'
    mail.on_success = '{{ backup_notify_mail['on_success'] }}'
    mail.on_warning = '{{ backup_notify_mail['on_warning'] }}'
    mail.on_failure = '{{ backup_notify_mail['on_failure'] }}'
  end
{% endif %}  

  after do 
    `/etc/backup/scripts/hooks.sh #{self.trigger} after`
    if $? != 0
      Logger.error File.read(logfile) if File.exists?(logfile)
      raise "Error in #{self.trigger}-after"
    end
  end

  tmp_path  File.join('{{ backup_tmp }}', '{{ inventory_hostname }}')
end

{% for item in backup_roles %}
# Role: {{ item }}
{% endfor %}


